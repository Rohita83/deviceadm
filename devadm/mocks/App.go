// Copyright 2017 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/deviceadm/model"
import store "github.com/mendersoftware/deviceadm/store"

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// AcceptDeviceAuth provides a mock function with given fields: ctx, id
func (_m *App) AcceptDeviceAuth(ctx context.Context, id model.AuthID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AcceptDevicePreAuth provides a mock function with given fields: ctx, id
func (_m *App) AcceptDevicePreAuth(ctx context.Context, id model.AuthID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceAuth provides a mock function with given fields: ctx, id
func (_m *App) DeleteDeviceAuth(ctx context.Context, id model.AuthID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceData provides a mock function with given fields: ctx, id
func (_m *App) DeleteDeviceData(ctx context.Context, id model.DeviceID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeviceID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeviceAuth provides a mock function with given fields: ctx, id
func (_m *App) GetDeviceAuth(ctx context.Context, id model.AuthID) (*model.DeviceAuth, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.DeviceAuth
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthID) *model.DeviceAuth); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeviceAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.AuthID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceAuths provides a mock function with given fields: ctx, skip, limit, filter
func (_m *App) ListDeviceAuths(ctx context.Context, skip int, limit int, filter store.Filter) ([]model.DeviceAuth, error) {
	ret := _m.Called(ctx, skip, limit, filter)

	var r0 []model.DeviceAuth
	if rf, ok := ret.Get(0).(func(context.Context, int, int, store.Filter) []model.DeviceAuth); ok {
		r0 = rf(ctx, skip, limit, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DeviceAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, store.Filter) error); ok {
		r1 = rf(ctx, skip, limit, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreauthorizeDevice provides a mock function with given fields: ctx, authSet, authorizationHeader
func (_m *App) PreauthorizeDevice(ctx context.Context, authSet model.AuthSet, authorizationHeader string) error {
	ret := _m.Called(ctx, authSet, authorizationHeader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthSet, string) error); ok {
		r0 = rf(ctx, authSet, authorizationHeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProvisionTenant provides a mock function with given fields: ctx, tenant_id
func (_m *App) ProvisionTenant(ctx context.Context, tenant_id string) error {
	ret := _m.Called(ctx, tenant_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tenant_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RejectDeviceAuth provides a mock function with given fields: ctx, id
func (_m *App) RejectDeviceAuth(ctx context.Context, id model.AuthID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitDeviceAuth provides a mock function with given fields: ctx, d
func (_m *App) SubmitDeviceAuth(ctx context.Context, d model.DeviceAuth) error {
	ret := _m.Called(ctx, d)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DeviceAuth) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
